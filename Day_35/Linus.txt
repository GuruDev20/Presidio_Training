1. You have a file with permissions -rw-r--r--, and you run chmod +x file.sh. What happens?

The command adds execute permission for the user (owner), so the new permissions become -rwxr--r--.
Now, the owner can run (execute) the file like a script, but the group and others still can't execute it.

2. What is the difference between chmod 744 file.txt and chmod u=rwx,go=r file.txt?

Both commands set the same permissions: owner gets full (read/write/execute), group and others get only read.
The difference is in syntax: 744 is numeric, u=rwx,go=r is symbolic.Functionally same, just two ways to write the same thing.

3. What is the sticky bit, and when should you use it?

Sticky bit is a special permission mostly used on shared folders.
It ensures only the owner of a file can delete or rename their file even if others have write access to the directory.Helps maintain file safety in public or team-shared folders.

4. You are told to give the owner full access, group only execute, and others no permissions. What symbolic command achieves this?

Use symbolic mode: chmod u=rwx,g=x,o=file.txt
This sets Owner - Read, Write, Execute,Group - Execute only,Others - No permissions at all

5. What is umask, and why is it important?

umask stands for user file-creation mask — it defines the default permissions new files/directories get by subtracting from the max number of files and directories
It's important because it sets secure defaults so users don’t accidentally create files with too many permissions

6. If the umask is 022, what are the default permissions for a new file and a new directory?

File: 666 - 022 = 644 → rw-r--r--
Directory: 777 - 022 = 755 → rwxr-xr-x

7. Why is umask often set to 002 in development environments but 027 or 077 in production?

002 allows group write access — makes it easy for teams to collaborate on files.
In production, 027 or 077 lock things down:
027 → No access for others
077 → Only owner has access
It’s a security practice to prevent leaks or unauthorized access.

8. useradd vs adduser

useradd is a low-level system command, fast but manual — you have to set home directory, shell, etc., yourself.
adduser is a friendly wrapper around useradd — it asks you step-by-step (password, full name, etc.).